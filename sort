#!/usr/bin/env php
<?php
/**
 * Sort script.
 *
 * Sorts randomized floating numbers from file and save to another file.
 *
 * @author  Adam "Saibamen" Stachowicz <saibamenppl@gmail.com>
 * @license MIT
 *
 * @link    https://github.com/Saibamen/Generate-Sort-Numbers
 */

namespace Sort;

use Includes\File;
use Includes\Generate;
use Includes\Input;
use Includes\Text;

// Run only in CLI
if (php_sapi_name() !== 'cli') {
    exit('This is console app. Please run it in console (CLI)!');
}

// Increase the memory limit
ini_set('memory_limit', '1024M');

require_once 'Includes/Generate.php';
require_once 'Includes/Input.php';
require_once 'Includes/File.php';

// Console arguments
$longOpts = array(
    'input:',
    'output:',
    'ext:',
    'debug',
);

$args = getopt(null, $longOpts);
var_dump($args);

// Extension
$fileExtension = '.dat';

if (isset($args['ext'])) {
    $fileExtension = $args['ext'];
}

// Debug mode
if (isset($args['debug'])) {
    Text::message('Debug mode. Have fun!');
    Text::setDebug(true);
}

// Input
if (isset($args['input'])) {
    if (file_exists($args['input'].$fileExtension)) {
        $inputFilename = $args['input'];
    } else {
        Text::message('Input file does not exist.');
    }
}

// Output
if (isset($args['output'])) {
    if (Input::isFilenameWrong($args['output'])) {
        Text::message('Wrong output filename.');
    } else {
        $outputFilename = $args['output'];
    }
}

unset($args);

// Collect User input
if (!isset($inputFilename)) {
    $inputFilename = Input::getExistsFilename('Type input filename to read (without extension)', 'output', $fileExtension);
}

if (!isset($outputFilename)) {
    $outputFilename = Input::getFilename('Type output filename (without extension)', 'sorted', $fileExtension);
}

File::createMissingDirectory($outputFilename);
File::checkIfFileExistsAndDeleteContent($outputFilename, $fileExtension);

$array = File::getArrayFromFile($inputFilename, $fileExtension);
Text::debug('Array elements: '.count($array));

Text::message('SORTING...');
$sortStart = microtime(true);

sort($array);

Text::printTimeDuration($sortStart);

File::saveArrayToFile($array, $outputFilename, ' ', $fileExtension);
